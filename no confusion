manage.py Location: The manage.py script is Django's command-line utility for your project. To run commands like runserver, makemigrations, migrate, etc., you need to be in the same directory as manage.py (or provide a path to it, but being in the directory is standard).



    Why do this at all? (The core concept of virtual environments)

        Isolation: Python projects often depend on specific versions of libraries (like Django, Requests, Pillow, etc.). If you installed all libraries globally, Project A might need Django 3.2, while Project B needs Django 4.1. This would create conflicts.

        A virtual environment creates an isolated "bubble" for your project. When you activate it:

            Your system's PATH environment variable is temporarily modified. The bin directory of your virtual environment (myworld/bin/) is put at the front of the PATH.

            This means when you type python, pip, or any other command that might exist in that bin directory (like django-admin), your shell finds the version inside myworld/bin/ before it finds any system-wide versions.

            Any packages you install using pip (while the environment is active) will be installed only inside this myworld environment, not globally.

        Analogy: Think of it like having a separate, clean workshop (virtual environment) for each project, with its own specific set of tools (Python version, libraries).

    What activate specifically does:

        It's a shell script that modifies your current shell session's environment variables (like PATH and VIRTUAL_ENV).

        It often changes your command prompt (e.g., (myworld) user@host:~$) to remind you which environment is active.


